@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller

<div class="membersPanel">
    <div class="card">
        <div class="card-header">Scrum Master</div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">@Controller.ScrumMaster</li>
        </ul>

        <div class="card-header">Members</div>
        <ul class="list-group list-group-flush">
            @foreach (var member in Controller.Members)
            {
                <li class="list-group-item">
                    <span>@member</span>
                    @if (Controller.IsScrumMaster)
                    {
                        <button type="button" @onclick="@(e => KickoffMemberCommand(member))" class="close text-danger float-right" aria-label="Remove">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                </li>
            }
        </ul>

        <div class="card-header">Observers</div>
        <ul class="list-group list-group-flush">
            @foreach (var observer in Controller.Observers)
            {
                <li class="list-group-item">
                    <span>@observer</span>
                    @if (Controller.IsScrumMaster)
                    {
                        <button type="button" @onclick="@(e => KickoffMemberCommand(observer))" class="close text-danger float-right" aria-label="Remove">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                </li>
            }
        </ul>
    </div>
</div>

@code
{
    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private Task KickoffMemberCommand(string member)
    {
        return TryRun(() => Controller.DisconnectMember(member));
    }

    private void ControllerOnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }
}
