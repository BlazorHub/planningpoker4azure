@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<nav class="navbar navbar-fixed-top navbar-inverse">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbarPlanningPoker" aria-expanded="false" aria-controls="navbarPlanningPoker">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="https://github.com/duracellko/planningpoker4azure" target="_blank">Planning Poker Website</a>
        </div>
        <div id="navbarPlanningPoker" class="collapse navbar-collapse">
            @if (IsConnected)
            {
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a onclick="@DisconnectCommand">
                            <span class="glyphicon glyphicon-log-out"></span> Disconnect
                        </a>
                    </li>
                </ul>
            }
        </div>
    </div>
</nav>

@functions
{
    public bool IsConnected => Controller.IsConnected;

    public Task DisconnectCommand()
    {
        return TryRun(async () =>
        {
            await Controller.Disconnect();
            UriHelper.NavigateTo("/");
        });
    }

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInit()
    {
        base.OnInit();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private void ControllerOnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(Controller.IsConnected))
        {
            StateHasChanged();
        }
    }
}